#include <cstdlib>
#include <cstring>
#include <iostream>
#include <iomanip>
#include <sstream>

#include "Trinx.h"
#include "counter/trinx_cmds.h"
#include "common/format.h"


static const size_t MESSAGE_SIZE = 32;

static const uint8_t TMAC42[] =
        { 0xad, 0x4b, 0x85, 0x61, 0x84, 0x3c, 0xb4, 0x35, 0x19, 0x24, 0x06, 0xdd, 0xe5, 0x3b, 0x14, 0xaf, 0x1a, 0x3d, 0xab, 0x5c, 0xa0, 0xa3, 0xb4, 0xef, 0xe9, 0x0e, 0xc9, 0x89, 0xcd, 0x23, 0x6d, 0xce };

static const uint8_t TC42[][ COUNTER_CERTIFICATE_SIZE ] =
        {
        {  },
        { 0x5a, 0x17, 0x69, 0x27, 0xfc, 0x08, 0xea, 0x12, 0x3e, 0x84, 0xa8, 0xc8, 0x5e, 0x08, 0x7b, 0x17, 0xf8, 0xcd, 0x8f, 0x72, 0xf9, 0x11, 0x81, 0xf7, 0x6f, 0xc3, 0x10, 0x5e, 0xda, 0x22, 0xd7, 0x6a },
        { 0x15, 0x81, 0x25, 0xba, 0x94, 0x36, 0x89, 0xe2, 0x66, 0xb2, 0xe4, 0x48, 0x2b, 0x0e, 0xc2, 0x85, 0x1e, 0xa0, 0x3f, 0xc9, 0x4e, 0x06, 0x57, 0x05, 0xf4, 0xd9, 0x99, 0xc6, 0xbd, 0xce, 0x91, 0x26 },
        { 0xb7, 0x01, 0x42, 0x7b, 0x73, 0x28, 0x20, 0x2f, 0x38, 0xfd, 0x23, 0xe4, 0x73, 0x45, 0x3e, 0xc6, 0xc3, 0xe1, 0x6c, 0x72, 0x74, 0x70, 0xa2, 0xbe, 0x40, 0x25, 0xbd, 0x92, 0x5e, 0x8d, 0xf1, 0x05 },
        { 0x5f, 0xd3, 0xb5, 0xaa, 0xbb, 0x20, 0xa0, 0x25, 0x77, 0x3b, 0xed, 0xdb, 0xeb, 0x5d, 0x82, 0xac, 0x8e, 0x26, 0x6f, 0x98, 0xda, 0x8f, 0x2d, 0xbc, 0x65, 0x2a, 0x11, 0xc8, 0xbf, 0x79, 0xb0, 0x22 },
        { 0xc5, 0x65, 0x81, 0x14, 0x31, 0x63, 0x6f, 0x9e, 0x25, 0x71, 0xd8, 0xbe, 0x3e, 0x37, 0x80, 0xb0, 0xe4, 0x88, 0x1c, 0x7a, 0xd3, 0x75, 0x50, 0xdc, 0xf8, 0x9c, 0x0b, 0xb7, 0x6e, 0x14, 0xe6, 0xff },
        { 0xee, 0x7c, 0x95, 0xa1, 0x6f, 0xcb, 0x07, 0x79, 0xc8, 0x94, 0x85, 0x63, 0xb0, 0x7e, 0xf2, 0x01, 0xf9, 0xf9, 0x78, 0x97, 0x96, 0x7b, 0x0a, 0xf2, 0xf4, 0xf0, 0x27, 0xdb, 0xb2, 0x52, 0xaa, 0x09 },
        { 0x68, 0x8a, 0x36, 0xcc, 0xa3, 0x93, 0x7f, 0x11, 0xd7, 0x88, 0x70, 0x26, 0x43, 0x9a, 0xdb, 0x74, 0x47, 0x8c, 0x38, 0xfc, 0x8a, 0xd8, 0xf6, 0xbd, 0xa0, 0xa8, 0xb7, 0x66, 0x0e, 0xf4, 0xb3, 0xec },
        { 0x7f, 0x96, 0xd1, 0x5b, 0xaa, 0xe7, 0x6a, 0x2e, 0x46, 0x4d, 0x6e, 0xa7, 0x1b, 0x8e, 0xbd, 0x69, 0xbf, 0xd0, 0x46, 0x91, 0x53, 0x19, 0xb2, 0x5b, 0x24, 0xeb, 0xe2, 0xe9, 0x34, 0xbf, 0x2e, 0xb6 },
        { 0x00, 0xaa, 0x20, 0x89, 0xec, 0x49, 0x09, 0x22, 0xbd, 0x3d, 0x75, 0x70, 0x47, 0xbd, 0x12, 0x73, 0xa9, 0x92, 0x53, 0x99, 0x45, 0x9c, 0x72, 0xe3, 0xf6, 0x0d, 0x4d, 0xdf, 0xe3, 0xef, 0x76, 0xa3 },
        };


static const uint8_t CONS[] =
        { 0xda, 0x88, 0x68, 0xd5, 0x6a, 0x7e, 0x5d, 0xb3, 0x07, 0x41, 0x99, 0x9f, 0x8f, 0x64, 0x2b, 0x0e, 0xf1, 0x82, 0xae, 0xa1, 0xc3, 0x0b, 0x82, 0xa8, 0x4d, 0x24, 0x4c, 0x8b, 0x56, 0x4f, 0x3d, 0x35 };

//static const uint8_t MULTI[] =
//        { 0xd8, 0x17, 0xdd, 0x79, 0x9c, 0xd1, 0x08, 0x0f, 0x39, 0x3b, 0x75, 0xb2, 0xcf, 0x5b, 0x8a, 0xe4, 0x93, 0x17, 0x5a, 0x1c, 0xdf, 0x8f, 0xef, 0x36, 0x85, 0x22, 0x2c, 0x09, 0x8d, 0xfc, 0xbb, 0x18 };
//
//static const uint8_t MULTICONS[] =
//        { 0xa5, 0xab, 0x39, 0x51, 0xa3, 0x45, 0xec, 0x7d, 0x65, 0x8d, 0xc3, 0x39, 0x1b, 0xfe, 0x92, 0x81, 0x34, 0x42, 0x18, 0x31, 0xb9, 0xc8, 0x66, 0xdc, 0xc7, 0x4c, 0xaa, 0x62, 0x21, 0xdc, 0xd4, 0x4f };


class check_error : public std::exception
{
    std::string m_msg;

public:

    check_error(const char *msg)
    {
        m_msg = msg;
    }

    ~check_error() throw () {}

    const char *what() const throw ()
    {
        return m_msg.c_str();
    }
};


static void checkCertificate(bool isval, const uint8_t *cert, const uint8_t *expected, size_t certsize)
{
    if( !isval || std::memcmp( cert, expected, certsize ) )
        throw check_error( "Certificate invalid" );
}


static void print(const uint8_t *msg, size_t msgsize, const uint8_t *cert, size_t certsize)
{
    std::cout << format::data_to_hex_string( msg, msgsize )
              << " -> " << format::data_to_hex_string( cert, certsize ) << std::endl;
}


void check_counter_implementation()
{
    Trinx tm42( 42, 2, KEY, sizeof( KEY ) );

    bool check = tm42.GetMacCertificateSize()!=(size_t) -1;

    uint8_t msg[ MESSAGE_SIZE ] = { 0 };
    uint8_t certbuf[ COUNTER_CERTIFICATE_SIZE ] = { 0 };

    certification_command<verify_continuing_counter_body> cmd;

    // Check MAC implementation
    if( check )
    {
        if( tm42.GetMacCertificateSize()!=MAC_CERTIFICATE_SIZE )
            throw check_error( "Unexpected MAC certificate size" );

        std::cout << "MAC" << std::endl;

        tm42.ExecuteCommand( &cmd.createTrustedMac().tss( 42 ).message( msg, sizeof( msg ), certbuf ) );
        tm42.ExecuteCommand( &cmd.verifyTrustedMac().message( msg, sizeof( msg ), certbuf ) );
        bool isval = cmd.is_certificate_valid();

        print( msg, sizeof( msg ), certbuf, sizeof( certbuf ) );
        checkCertificate( isval, certbuf, TMAC42, MAC_CERTIFICATE_SIZE );
    }

    // Check TC implementation
    if( tm42.GetCounterCertificateSize()!=COUNTER_CERTIFICATE_SIZE )
        throw check_error( "Unexpected counter certificate size" );

    std::cout << "Counters" << std::endl;

    for( size_t i=1; i<sizeof( TC42 )/sizeof( TC42[ 0 ] ); i++ )
    {
        tm42.ExecuteCommand( &cmd.createIndependent().tss( 42 ).counter( 0 ).value( 0, i ).message( msg, sizeof( msg ), certbuf ) );

        print( msg, sizeof( msg ), certbuf, sizeof( certbuf ) );

        if( check )
        {
            tm42.ExecuteCommand( &cmd.verifyIndependent().message( msg, sizeof( msg ), certbuf ) );
            bool isval = cmd.is_certificate_valid();
            checkCertificate( isval, certbuf, TC42[ i ], COUNTER_CERTIFICATE_SIZE );
        }
    }

    if( check )
    {
        std::cout << "Continuing Counters" << std::endl;
        tm42.ExecuteCommand( &cmd.createIndependent().tss( 42 ).counter( 1 ).value( 0, 42 ).message( msg, sizeof( msg ), certbuf ) );
        tm42.ExecuteCommand( &cmd.createContinuing().value( 0, 100 ).message( msg, sizeof( msg ), certbuf ) );

        print( msg, sizeof( msg ), certbuf, sizeof( certbuf ) );

        tm42.ExecuteCommand( &cmd.verifyContinuing().values( counter_t( 0, 100 ), counter_t( 0, 42 ) ).message( msg, sizeof( msg ), certbuf ) );
        bool isval = cmd.is_certificate_valid();
        checkCertificate( isval, certbuf, CONS, sizeof( certbuf ) );

//        std::cout << "Multi Counters" << std::endl;
//        ctrno_t   ctrnos[] { 0, 1 };
//        counter_t ctrvals[] { counter_t( 1, 200 ), counter_t( 2, 300 ) };
//
//        tm42.CreateMultiCounterCertificate( msg, sizeof( msg ), 2, ctrnos, ctrvals, certbuf );
//
//        print( msg, sizeof( msg ), certbuf, sizeof( certbuf ) );
//
//        isval = tm42.VerifyMultiCounterCertificate( msg, sizeof( msg ), certbuf, 42, 2, ctrnos, ctrvals );
//        checkCertificate( isval, certbuf, MULTI, sizeof( certbuf ) );
//
//        std::cout << "Consecutive Multi Counters" << std::endl;
//        counter_t nextvals[] { counter_t( 1, 250 ), counter_t( 2, 350 ) };
//        tm42.CreateConsecutiveMultiCounterCertificate( msg, sizeof( msg ), 2, ctrnos, nextvals, certbuf );
//
//        print( msg, sizeof( msg ), certbuf, sizeof( certbuf ) );
//
//        isval = tm42.VerifyConsecutiveMultiCounterCertificate( msg, sizeof( msg ), certbuf, 42, 2, ctrnos,
//                                                               nextvals, ctrvals );
//        checkCertificate( isval, certbuf, MULTICONS, sizeof( certbuf ) );
    }
}
