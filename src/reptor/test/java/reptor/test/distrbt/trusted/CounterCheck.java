package reptor.test.distrbt.trusted;

import java.util.Arrays;
import java.util.function.Function;

import reptor.distrbt.certify.trusted.Trinx;
import reptor.distrbt.certify.trusted.TrinxCommands.TrinxCommandBatch;
import reptor.distrbt.certify.trusted.TrinxCommands.TrinxCommandBuffer;
import reptor.distrbt.certify.trusted.TrinxCommands.TrinxCommandType;
import reptor.distrbt.certify.trusted.TrinxImplementation;
import reptor.distrbt.common.data.Data;
import reptor.distrbt.common.data.DataBuffer;
import reptor.distrbt.common.data.DataFormat;
import reptor.jlib.ExtArrays;


public class CounterCheck
{


    static final int MESSAGE_SIZE             = 32;
    static final int MAC_CERTIFICATE_SIZE     = 32;
    static final int COUNTER_CERTIFICATE_SIZE = MAC_CERTIFICATE_SIZE;

    static final int TGROUP[] =
            { 0x92, 0x83, 0x1b, 0x78, 0xf3, 0x9b, 0xaa, 0x6c, 0x68, 0x9a, 0x42, 0xf5, 0xe7, 0xd2, 0x63, 0x72, 0x71, 0x7f, 0x50, 0xd1, 0xd0, 0x63, 0x5a, 0x42, 0xb4, 0x9c, 0xc3, 0x64, 0x3b, 0x18, 0x95, 0x6c };

    static final int TMAC42[] =
            { 0xad, 0x4b, 0x85, 0x61, 0x84, 0x3c, 0xb4, 0x35, 0x19, 0x24, 0x06, 0xdd, 0xe5, 0x3b, 0x14, 0xaf, 0x1a, 0x3d, 0xab, 0x5c, 0xa0, 0xa3, 0xb4, 0xef, 0xe9, 0x0e, 0xc9, 0x89, 0xcd, 0x23, 0x6d, 0xce };

    static final int TC42[][] =
            {
            {  },
            { 0x5a, 0x17, 0x69, 0x27, 0xfc, 0x08, 0xea, 0x12, 0x3e, 0x84, 0xa8, 0xc8, 0x5e, 0x08, 0x7b, 0x17, 0xf8, 0xcd, 0x8f, 0x72, 0xf9, 0x11, 0x81, 0xf7, 0x6f, 0xc3, 0x10, 0x5e, 0xda, 0x22, 0xd7, 0x6a },
            { 0x15, 0x81, 0x25, 0xba, 0x94, 0x36, 0x89, 0xe2, 0x66, 0xb2, 0xe4, 0x48, 0x2b, 0x0e, 0xc2, 0x85, 0x1e, 0xa0, 0x3f, 0xc9, 0x4e, 0x06, 0x57, 0x05, 0xf4, 0xd9, 0x99, 0xc6, 0xbd, 0xce, 0x91, 0x26 },
            { 0xb7, 0x01, 0x42, 0x7b, 0x73, 0x28, 0x20, 0x2f, 0x38, 0xfd, 0x23, 0xe4, 0x73, 0x45, 0x3e, 0xc6, 0xc3, 0xe1, 0x6c, 0x72, 0x74, 0x70, 0xa2, 0xbe, 0x40, 0x25, 0xbd, 0x92, 0x5e, 0x8d, 0xf1, 0x05 },
            { 0x5f, 0xd3, 0xb5, 0xaa, 0xbb, 0x20, 0xa0, 0x25, 0x77, 0x3b, 0xed, 0xdb, 0xeb, 0x5d, 0x82, 0xac, 0x8e, 0x26, 0x6f, 0x98, 0xda, 0x8f, 0x2d, 0xbc, 0x65, 0x2a, 0x11, 0xc8, 0xbf, 0x79, 0xb0, 0x22 },
            { 0xc5, 0x65, 0x81, 0x14, 0x31, 0x63, 0x6f, 0x9e, 0x25, 0x71, 0xd8, 0xbe, 0x3e, 0x37, 0x80, 0xb0, 0xe4, 0x88, 0x1c, 0x7a, 0xd3, 0x75, 0x50, 0xdc, 0xf8, 0x9c, 0x0b, 0xb7, 0x6e, 0x14, 0xe6, 0xff },
            { 0xee, 0x7c, 0x95, 0xa1, 0x6f, 0xcb, 0x07, 0x79, 0xc8, 0x94, 0x85, 0x63, 0xb0, 0x7e, 0xf2, 0x01, 0xf9, 0xf9, 0x78, 0x97, 0x96, 0x7b, 0x0a, 0xf2, 0xf4, 0xf0, 0x27, 0xdb, 0xb2, 0x52, 0xaa, 0x09 },
            { 0x68, 0x8a, 0x36, 0xcc, 0xa3, 0x93, 0x7f, 0x11, 0xd7, 0x88, 0x70, 0x26, 0x43, 0x9a, 0xdb, 0x74, 0x47, 0x8c, 0x38, 0xfc, 0x8a, 0xd8, 0xf6, 0xbd, 0xa0, 0xa8, 0xb7, 0x66, 0x0e, 0xf4, 0xb3, 0xec },
            { 0x7f, 0x96, 0xd1, 0x5b, 0xaa, 0xe7, 0x6a, 0x2e, 0x46, 0x4d, 0x6e, 0xa7, 0x1b, 0x8e, 0xbd, 0x69, 0xbf, 0xd0, 0x46, 0x91, 0x53, 0x19, 0xb2, 0x5b, 0x24, 0xeb, 0xe2, 0xe9, 0x34, 0xbf, 0x2e, 0xb6 },
            { 0x00, 0xaa, 0x20, 0x89, 0xec, 0x49, 0x09, 0x22, 0xbd, 0x3d, 0x75, 0x70, 0x47, 0xbd, 0x12, 0x73, 0xa9, 0x92, 0x53, 0x99, 0x45, 0x9c, 0x72, 0xe3, 0xf6, 0x0d, 0x4d, 0xdf, 0xe3, 0xef, 0x76, 0xa3 },
            };

    static final int CONS[] =
            { 0xda, 0x88, 0x68, 0xd5, 0x6a, 0x7e, 0x5d, 0xb3, 0x07, 0x41, 0x99, 0x9f, 0x8f, 0x64, 0x2b, 0x0e, 0xf1, 0x82, 0xae, 0xa1, 0xc3, 0x0b, 0x82, 0xa8, 0x4d, 0x24, 0x4c, 0x8b, 0x56, 0x4f, 0x3d, 0x35 };

    static final int MULTI[] =
            { 0xd8, 0x17, 0xdd, 0x79, 0x9c, 0xd1, 0x08, 0x0f, 0x39, 0x3b, 0x75, 0xb2, 0xcf, 0x5b, 0x8a, 0xe4, 0x93, 0x17, 0x5a, 0x1c, 0xdf, 0x8f, 0xef, 0x36, 0x85, 0x22, 0x2c, 0x09, 0x8d, 0xfc, 0xbb, 0x18 };

    static final int MULTICONS[] =
            { 0xa5, 0xab, 0x39, 0x51, 0xa3, 0x45, 0xec, 0x7d, 0x65, 0x8d, 0xc3, 0x39, 0x1b, 0xfe, 0x92, 0x81, 0x34, 0x42, 0x18, 0x31, 0xb9, 0xc8, 0x66, 0xdc, 0xc7, 0x4c, 0xaa, 0x62, 0x21, 0xdc, 0xd4, 0x4f };


    static final int BATCH[][] =
        {
        { 0x4f, 0x51, 0xc9, 0xa2, 0xb7, 0x76, 0x2d, 0x29, 0xf9, 0x0f, 0x96, 0x6d, 0x84, 0xbe, 0x6c, 0xeb, 0x9d, 0xe7, 0xc2, 0x38, 0xd4, 0xf6, 0x40, 0x8f, 0xd4, 0xe0, 0x57, 0x2a, 0x74, 0x60, 0x1e, 0x49 },
        { 0xad, 0x73, 0x80, 0xad, 0x0c, 0x10, 0x76, 0xc9, 0xf7, 0xc4, 0xa1, 0x13, 0xd3, 0x4c, 0xa4, 0x05, 0xd5, 0x7a, 0x16, 0x90, 0x60, 0x35, 0x43, 0x04, 0x6d, 0xaf, 0xb9, 0x29, 0x7a, 0x2f, 0x6f, 0x96 },
        { 0xe6, 0xb4, 0xbb, 0xae, 0xf7, 0x1a, 0x40, 0xb0, 0x02, 0x7f, 0x19, 0x3d, 0xb4, 0xf0, 0xad, 0x20, 0x6c, 0x2d, 0x6d, 0xe2, 0x43, 0x34, 0x13, 0x76, 0x6a, 0x23, 0x35, 0xb2, 0x8c, 0x6c, 0x50, 0xac },
        { 0x0f, 0x3c, 0x2a, 0x03, 0x06, 0x7f, 0x16, 0x03, 0xd8, 0x1a, 0x5b, 0xc6, 0x45, 0x73, 0x62, 0x87, 0xc4, 0x2e, 0x0b, 0xd0, 0x92, 0x1d, 0x79, 0x40, 0xad, 0x48, 0xb7, 0xc2, 0x51, 0x1d, 0x93, 0x1a },
        { 0x56, 0xbc, 0x9a, 0x0d, 0x7f, 0x23, 0x1d, 0x96, 0x1e, 0xa5, 0xe8, 0xc8, 0x49, 0xb1, 0x9c, 0x88, 0x2f, 0x42, 0xee, 0x76, 0xa4, 0xd1, 0x4b, 0xda, 0x54, 0x83, 0x9f, 0xe9, 0xb9, 0xc6, 0x0e, 0x87 }
        };

    public static void checkCounterImplementation(TrinxImplementation tm, Function<TrinxCommandType, TrinxCommandBuffer> cmdfac)
    {
        try( Trinx tm42 = tm.createTrinx( (short) 42, 3 ) )
        {
            TrinxCommandBuffer cmd = cmdfac.apply( TrinxCommandType.VERIFY_CONTINUING_COUNTER );

            // We cannot check CASH yet due to its fixed tmid.
            boolean check = tm42.getMacCertificateSize()>=0;

            Data       msg    = new DataBuffer( MESSAGE_SIZE );
            DataBuffer crtbuf = new DataBuffer( tm42.getCounterCertificateSize() );
            Data       crtdat = new DataBuffer( crtbuf.array() );

            // Check MAC implementation
            if( check )
            {
                if( tm42.getMacCertificateSize()!=MAC_CERTIFICATE_SIZE )
                    throw new IllegalStateException();

                System.out.println( "TGROUP" );
                cmd.createTrustedGroup().message( msg, crtbuf ).execute( tm42 );
                print( msg, crtbuf );

                boolean isval = cmd.verifyTrustedGroup().message( msg, crtdat.slice( 0, MAC_CERTIFICATE_SIZE ) )
                                   .execute( tm42 ).isCertificateValid();
                check( isval, crtbuf, TGROUP );
                crtbuf.resetSlice();

                System.out.println( "TMAC" );
                cmd.createTrustedMac().tss( tm42.getID() ).message( msg, crtbuf ).execute( tm42 );
                print( msg, crtbuf );

                isval = cmd.verifyTrustedMac().message( msg, crtdat.slice( 0, MAC_CERTIFICATE_SIZE ) )
                           .execute( tm42 ).isCertificateValid();
                check( isval, crtbuf, TMAC42 );
                crtbuf.resetSlice();
            }

            // Check TC implementation
            if( tm42.getCounterCertificateSize()!=COUNTER_CERTIFICATE_SIZE )
                throw new IllegalStateException();

            System.out.println( "Counters" );

            cmd.createIndependent().counter( tm42.getID(), 0 );

            for( int i=1; i<TC42.length; i++ )
            {
                crtbuf.resetSlice();
                cmd.createIndependent().message( msg, crtbuf ).value( 0, i ).execute( tm42 );

                print( msg, crtbuf );

                if( check )
                {
                    boolean isval = cmd.verifyIndependent().message( msg, crtdat ).execute( tm42 ).isCertificateValid();
                    check( isval, crtbuf, TC42[ i ] );
                }
            }

            if( check )
            {
                System.out.println( "Continuing Counters" );
                crtbuf.resetSlice();
                cmd.createIndependent().counter( 1 ).message( msg, crtbuf ).value( 0, 42 ).execute( tm42 );
                crtbuf.resetSlice();
                cmd.createContinuing().message( msg, crtbuf ).value( 100 ).execute( tm42 );

                print( msg, crtbuf );

                boolean isval = cmd.verifyContinuing().message( msg, crtdat ).values( 0, 100, 0, 42 ).execute( tm42 ).isCertificateValid();
                check( isval, crtbuf, CONS );

//                System.out.println( "Multi Counters" );
//                crtbuf.rewind();
//                tm42.createMultiCounterCertificate( msg, new int[] { 0, 1 }, new long[] { 1, 2 }, new long[] { 200, 300 }, crtbuf );
//
//                print( msg, crtbuf );
//
//                isval = tm42.verifyMultiCounterCertificate( msg, crtdat, 0, (short) 42, new int[] { 0, 1 }, new long[] { 1, 2 }, new long[] { 200, 300 } );
//                check( isval, crtbuf, MULTI );
//
//                System.out.println( "Consecutive Multi Counters" );
//                crtbuf.rewind();
//                tm42.createContinuingMultiCounterCertificate( msg, new int[] { 0, 1 }, new long[] { 1, 2 }, new long[] { 250, 350 }, crtbuf );
//
//                print( msg, crtbuf );
//
//                isval = tm42.verifyContinuingMultiCounterCertificate( msg, crtdat, 0, (short) 42, new int[] { 0, 1 },
//                                                                       new long[] { 1, 2 }, new long[] { 250, 350 },
//                                                                       new long[] { 1, 2 }, new long[] { 200, 300 } );
//                check( isval, crtbuf, MULTICONS );

                System.out.println( "Batching" );
                int batchsize = 5;

                TrinxCommandBatch batch = new TrinxCommandBatch( batchsize );
                Data[]       msgs  = new Data[ batchsize ];
                DataBuffer[] certs = new DataBuffer[ batchsize ];

                for( int cmdno=0; cmdno<batchsize; cmdno++ )
                {
                    msgs[ cmdno ]  = new DataBuffer( MESSAGE_SIZE );
                    certs[ cmdno ] = new DataBuffer( tm42.getCounterCertificateSize() );

                    batch.initNext().createContinuing().counter( tm42.getID(), 2 ).value( cmdno+1, cmdno+1 )
                            .message( msgs[ cmdno ], certs[ cmdno ] );
                }

                batch.fix().finish();

                tm42.executeCommand( batch );

                batch.clear();

                for( int cmdno=0; cmdno<batchsize; cmdno++ )
                {
                    print( msgs[ cmdno ], certs[ cmdno ] );

                    certs[ cmdno ].resetSlice();
                    batch.initNext().verifyContinuing().counter( tm42.getID(), 2 ).values( cmdno+1, cmdno+1, cmdno, cmdno )
                        .message( msgs[ cmdno ], certs[ cmdno ] );
                }

                batch.fix().finish();

                tm42.executeCommand( batch );

                for( int cmdno=0; cmdno<batchsize; cmdno++ )
                    check( batch.get( cmdno ).isCertificateValid(), certs[ cmdno ], BATCH[ cmdno ] );
            }
        }
        catch( Exception e )
        {
            throw new IllegalStateException( e );
        }
    }


    private static void check(boolean isval, Data crtbuf, int[] expected)
    {
        if( !isval || !Arrays.equals( ExtArrays.convertToIntArray( crtbuf.array() ), expected ) )
            throw new IllegalStateException();
    }


    private static void print(Data msg, Data crtbuf)
    {
        System.out.println( DataFormat.HEX.format( msg.array() ) + " -> " + DataFormat.HEX.format( crtbuf.array() ) );
    }

}
